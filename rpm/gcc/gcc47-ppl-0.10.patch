2011-01-28  Jakub Jelinek  <jakub@redhat.com>

	Revert:
	2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>

	* configure: Regenerated.
	* configure.ac: Check for version 0.11 (or later revision) of PPL.
gcc/
	* doc/install.texi: Update the expected version number of PPL to 0.11.
	* graphite-ppl.c (ppl_powerset_is_empty): Remove now dead code under
	#if PPL_VERSION_MINOR < 11.

--- gcc/doc/install.texi	(revision 169207)
+++ gcc/doc/install.texi	(revision 169206)
@@ -362,7 +362,7 @@ installed but it is not in your default 
 @option{--with-mpc} configure option should be used.  See also
 @option{--with-mpc-lib} and @option{--with-mpc-include}.
 
-@item Parma Polyhedra Library (PPL) version 0.11
+@item Parma Polyhedra Library (PPL) version 0.10
 
 Necessary to build GCC with the Graphite loop optimizations.
 It can be downloaded from @uref{http://www.cs.unipr.it/ppl/Download/}.
--- gcc/graphite-ppl.c	(revision 169207)
+++ gcc/graphite-ppl.c	(revision 169206)
@@ -521,6 +521,15 @@ debug_gmp_value (mpz_t val)
 bool
 ppl_powerset_is_empty (ppl_Pointset_Powerset_C_Polyhedron_t ps)
 {
+#if PPL_VERSION_MAJOR == 0 && PPL_VERSION_MINOR < 11
+  /* On PPL 0.10,
+     ppl_Pointset_Powerset_C_Polyhedron_contains_integer_point (ps)
+     takes too long on some cases and so we call _is_empty instead.  */
+  return ppl_Pointset_Powerset_C_Polyhedron_is_empty (ps);
+
+#else
+  /* On PPL 0.11 or later, we can check for integer feasibility using
+     the PIP solver.  */
   ppl_PIP_Problem_t pip;
   ppl_dimension_type d;
   ppl_const_Constraint_System_t pcs;
@@ -561,6 +570,7 @@ ppl_powerset_is_empty (ppl_Pointset_Powe
   ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (end);
 
   return !has_integer_solutions;
+#endif
 }
 
 #endif
--- configure.ac	(revision 169207)
+++ configure.ac	(revision 169206)
@@ -1688,9 +1688,9 @@ if test "x$with_ppl" != xno; then
   if test "$enable_ppl_version_check" != no; then
     saved_CFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS $pplinc $gmpinc"
-    AC_MSG_CHECKING([for version 0.11 (revision 0 or later) of PPL])
+    AC_MSG_CHECKING([for version 0.10 (revision 0 or later) of PPL])
     AC_TRY_COMPILE([#include "ppl_c.h"],[
-    #if PPL_VERSION_MAJOR != 0 || PPL_VERSION_MINOR < 11
+    #if PPL_VERSION_MAJOR != 0 || PPL_VERSION_MINOR < 10
     choke me
     #endif
     ], [AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no]); ppllibs= ; pplinc= ; with_ppl=no ])
--- configure	(revision 169207)
+++ configure	(revision 169206)
@@ -5775,8 +5775,8 @@ fi
   if test "$enable_ppl_version_check" != no; then
     saved_CFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS $pplinc $gmpinc"
-    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for version 0.11 (revision 0 or later) of PPL" >&5
-$as_echo_n "checking for version 0.11 (revision 0 or later) of PPL... " >&6; }
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for version 0.10 (revision 0 or later) of PPL" >&5
+$as_echo_n "checking for version 0.10 (revision 0 or later) of PPL... " >&6; }
     cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 #include "ppl_c.h"
@@ -5784,7 +5784,7 @@ int
 main ()
 {
 
-    #if PPL_VERSION_MAJOR != 0 || PPL_VERSION_MINOR < 11
+    #if PPL_VERSION_MAJOR != 0 || PPL_VERSION_MINOR < 10
     choke me
     #endif
 
--- gcc/testsuite/gcc.dg/graphite/interchange-11.c.jj	2011-01-28 09:38:11.000000000 +0100
+++ gcc/testsuite/gcc.dg/graphite/interchange-11.c	2011-01-28 11:06:56.461429848 +0100
@@ -46,5 +46,5 @@ main (void)
   return 0;
 }
 
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
+/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } } */
 /* { dg-final { cleanup-tree-dump "graphite" } } */
--- gcc/testsuite/gcc.dg/graphite/interchange-13.c.jj	2011-01-28 09:38:12.000000000 +0100
+++ gcc/testsuite/gcc.dg/graphite/interchange-13.c	2011-01-28 11:07:08.182429223 +0100
@@ -50,5 +50,5 @@ main (void)
 }
 
 
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
+/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } } */
 /* { dg-final { cleanup-tree-dump "graphite" } } */
--- gcc/testsuite/gcc.dg/graphite/interchange-1.c.jj	2011-01-28 09:38:13.000000000 +0100
+++ gcc/testsuite/gcc.dg/graphite/interchange-1.c	2011-01-28 11:06:42.160429193 +0100
@@ -49,5 +49,5 @@ main (void)
   return 0;
 }
 
-/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } } */
+/* { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } } */
 /* { dg-final { cleanup-tree-dump "graphite" } } */
--- gcc/testsuite/gfortran.dg/graphite/interchange-3.f90.jj	2011-01-28 09:38:05.000000000 +0100
+++ gcc/testsuite/gfortran.dg/graphite/interchange-3.f90	2011-01-28 11:07:46.313420441 +0100
@@ -24,5 +24,5 @@ Program FOO
 
 end Program FOO
 
-! { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" } }
+! { dg-final { scan-tree-dump-times "will be interchanged" 1 "graphite" { xfail *-*-* } } }
 ! { dg-final { cleanup-tree-dump "graphite" } }
